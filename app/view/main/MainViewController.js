/*
 * File: app/view/main/MainViewController.js
 *
 * This file was generated by Sencha Architect version 3.5.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Admin.view.main.MainViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.main.main',

    requires: [
        'Ext.app.route.Route'
    ],

    config: {
        lastView: 'null'
    },

    listen: {
        controller: {
            '#': {
                unmatchedroute: 'onRouteChange'
            }
        }
    },

    routes: {
        ':node': 'onRouteChange'
    },

    onRouteChange: function(node) {
        this.setCurrentView(id);
    },

    setCurrentView: function(hashTag) {
                hashTag = (hashTag || '').toLowerCase();

                var me = this,
                    refs = me.getReferences(),
                    mainCard = refs.mainCardPanel,
                    mainLayout = mainCard.getLayout(),
                    navigationList = refs.navigationTreeList,
                    store = navigationList.getStore(),
                    node = store.findNode('routeId', hashTag) ||
                           store.findNode('viewType', hashTag),
                    view = (node && node.get('viewType')) || 'page404',
                    lastView = me.lastView,
                    existingItem = mainCard.child('component[routeId=' + hashTag + ']'),
                    newView;

                // Kill any previously routed window
                if (lastView && lastView.isWindow) {
                    lastView.destroy();
                }

                lastView = mainLayout.getActiveItem();

                if (!existingItem) {
                    newView = Ext.create({
                        xtype: view,
                        routeId: hashTag,  // for existingItem search later
                        hideMode: 'offsets'
                    });
                }

                if (!newView || !newView.isWindow) {
                    // !newView means we have an existing view, but if the newView isWindow
                    // we don't add it to the card layout.
                    if (existingItem) {
                        // We don't have a newView, so activate the existing view.
                        if (existingItem !== lastView) {
                            mainLayout.setActiveItem(existingItem);
                        }
                        newView = existingItem;
                    }
                    else {
                        // newView is set (did not exist already), so add it and make it the
                        // activeItem.
                        Ext.suspendLayouts();
                        mainLayout.setActiveItem(mainCard.add(newView));
                        Ext.resumeLayouts(true);
                    }
                }

                navigationList.setSelection(node);

                if (newView.isFocusable(true)) {
                    newView.focus();
                }

                me.lastView = newView;
    },

    onMainViewRender: function(component, eOpts) {
        if (!window.location.hash) {
            this.redirectTo("dashboard");
        }
    },

    onToggleNavigationSize: function(button, e) {

    },

    onSwitchToModern: function(button, e) {

    }

});
