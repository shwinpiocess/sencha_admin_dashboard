/*
 * File: app/view/main/MainContainerWrap.js
 *
 * This file was generated by Sencha Architect version 3.5.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Admin.view.main.MainContainerWrap', {
    extend: 'Ext.container.Container',
    alias: 'widget.main.maincontainerwrap',

    requires: [
        'Admin.view.main.MainContainerWrapViewModel',
        'Ext.tree.Panel',
        'Ext.tree.View'
    ],

    viewModel: {
        type: 'main.maincontainerwrap'
    },
    scrollable: 'y',

    layout: {
        type: 'hbox',
        align: 'stretchmax'
    },
    items: [
        {
            xtype: 'treepanel',
            flex: 1,
            reference: 'navigationTreeList',
            itemId: 'navigationTreeList',
            width: 250,
            store: 'NavigationTree',
            singleExpand: true
        },
        {
            xtype: 'container',
            flex: 1,
            reference: 'mainCardPanel',
            anchor: '100%',
            cls: 'sencha-dash-right-main-container',
            itemId: 'contentPanel',
            layout: 'card'
        }
    ],

    beforeLayout: function() {
                // We setup some minHeights dynamically to ensure we stretch to fill the height
                // of the viewport minus the top toolbar

                var me = this,
                    height = Ext.Element.getViewportHeight() - 64,  // offset by topmost toolbar height
                    // We use itemId/getComponent instead of "reference" because the initial
                    // layout occurs too early for the reference to be resolved
                    navTree = me.getComponent('navigationTreeList');

                me.minHeight = height;

                navTree.setStyle({
                    'min-height': height + 'px'
                });

                me.callParent(arguments);
    }

});